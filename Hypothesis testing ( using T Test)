Definitions:

A quarter is a specific three month period, Q1 is January through March, Q2 is April through June, Q3 is July through September, Q4 is October through December.
A recession is defined as starting with two consecutive quarters of GDP decline, and ending with two consecutive quarters of GDP growth.
A recession bottom is the quarter within a recession which had the lowest GDP.
A university town is a city which has a high percentage of university students compared to the total population of the city

Hypothesis: University towns have their mean housing prices less effected by recessions. 

From the Zillow research data site there is housing data for the United States. In particular the datafile for all homes at a city level, City_Zhvi_AllHomes.csv, has median home sale prices at a fine grained level.
From the Wikipedia page on college towns is a list of university towns in the United States which has been copy and pasted into the file university_towns.txt.
From Bureau of Economic Analysis, US Department of Commerce, the GDP over time of the United States in current dollars (use the chained value in 2009 dollars), in quarterly intervals, in the file gdplev.xls. For this assignment, only look at GDP data from the first quarter of 2000 onward.

states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}


def get_list_of_university_towns():
    '''Returns a DataFrame of towns and the states they are in from the 
    university_towns.txt list. The format of the DataFrame should be:
    DataFrame( [ ["Michigan", "Ann Arbor"], ["Michigan", "Yipsilanti"] ], 
    columns=["State", "RegionName"]  )

    with open("university_towns.txt") as f:
        townslist = f.readlines()
    
    townslist = [x.rstrip() for x in townslist]
    
    townslist2 = list()
    
    for i in townslist:
        if i[-6:] == '[edit]':
            temp_state = i[:-6]
        elif '(' in i:
            town = i[:i.index('(') - 1]
            townslist2.append([temp_state, town])
        else:
            town = i
            townslist2.append([temp_state, town])

    collegedf = pd.DataFrame(townslist2, columns=['State','RegionName'])


    return collegedf

get_list_of_university_towns()





def get_recession_start():
    '''Returns the year and quarter of the recession start time as a 
    string value in a format such as 2005q3'''
    gdp= pd.read_excel('gdplev.xls', skiprows= 219)
    gdp = gdp[['1999q4', 12323.3]]
    gdp = gdp.rename(columns={'1999q4':'Quarter', 12323.3:'GDP in billions'})
    for i in range(0,gdp.shape[0]-1):
        if (gdp.iloc[i-2][1]> gdp.iloc[i-1][1]) and (gdp.iloc[i-1][1]> gdp.iloc[i][1]):
            startdate= gdp.iloc[i-3][0]
    #return  startdate
    return gdp.iloc[30:45,:]

get_recession_start()





import pandas as pd

def get_recession_end():
    '''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''
    gdplev = pd.ExcelFile('gdplev.xls')
    gdplev = gdplev.parse("Sheet1", skiprows=219)
    gdplev = gdplev[['1999q4', 9926.1]]
    gdplev.columns = ['Quarter','GDP']
    start = get_recession_start()
    start_index = gdplev[gdplev['Quarter'] == start].index.tolist()[0]
    gdplev=gdplev.iloc[start_index:]
    for i in range(2, len(gdplev)):
        if (gdplev.iloc[i-2][1] < gdplev.iloc[i-1][1]) and (gdplev.iloc[i-1][1] < gdplev.iloc[i][1]):
            return gdplev.iloc[i][0]


get_recession_end()





def get_recession_bottom(): 

    '''Returns the year and quarter of the recession bottom time as a  

    string value in a format such as 2005q3''' 

    gdp = pd.read_excel('gdplev.xls', header = None)  

    gdp = gdp.iloc[220:,4:7].reset_index()  

    del gdp['index']  

    gdp.columns = ['Quarters', 'GDP','GDP in billions of chained 2009 dollars']  

    #gdp_l = gdp['GDP'].tolist()  

    recession = []  

    k = 0  

    for k in range(0,63):  
        if (gdp.iloc[k,1] > gdp.iloc[k+1,1]):  
            if (gdp.iloc[k+1,1] > gdp.iloc[k+2,1]): 
                if (gdp.iloc[k+2,1] < gdp.iloc[k+3,1]):  
                    if (gdp.iloc[k+3,1] < gdp.iloc[k+4,1]):  
                        recession.append(gdp.iloc[k,0])  
                        a = k 

                         

    if(gdp.iloc[a+1,1] < gdp.iloc[a+2,1]): 
        
        return(gdp.iloc[a+1,0]) 

    else:
        return(gdp.iloc[a+2,0]) 
        
 


get_recession_bottom() 





def convert_housing_data_to_quarters():  



    df = pd.read_csv('City_Zhvi_AllHomes.csv')  

    df1 = df.iloc[:,1:3]  

    df2 = df.iloc[:,51:]  

    housing = pd.concat([df1,df2],axis = 1)  

    df5 = housing  

    for i in range(2,198,3):  

        df3 = housing.iloc[:,i:i+3]  

        df4 = df3.mean(axis = 1).to_frame()  
        a = df3.columns[0].split("-")[0]+"q"  

        df4.columns = [a]  

        housing = pd.concat([housing,df4], axis = 1)  

    df3 = df5.iloc[:,200:202]  

    df4 = df3.mean(axis = 1).to_frame()    
    a = df3.columns[0].split("-")[0]+"q"  

    df4.columns = [a]  

    housing = pd.concat([housing,df4], axis = 1)  
    housing = housing.iloc[:,202:]  
    l = []  

    for i in range(0,62,4):  

        l.append(housing.columns[i]+str(1))  

        l.append(housing.columns[i]+str(2))  

        l.append(housing.columns[i]+str(3))  

        l.append(housing.columns[i]+str(4)) 
    
    
    
    l.append(housing.columns[64]+str(1))  
    l.append(housing.columns[65]+str(2))  
    l.append(housing.columns[66]+str(3))   
    housing.columns = pd.Series(l)  
    #housing = pd.concat([df1,df2],axis = 1)  
    housing = pd.concat([df5[["State","RegionName"]], housing], axis = 1)  
    housing['State'] = housing['State'].replace(states) 
    housing = housing.set_index(["State","RegionName"])  
    return housing  
    

convert_housing_data_to_quarters() 




def run_ttest():
  
     
    towns = get_list_of_university_towns()
    startdate = get_recession_start()
    bottomdate = get_recession_bottom()
    houses = convert_housing_data_to_quarters()
    
    houses = houses.reset_index()
    houses['recession_diff'] = houses[startdate] - houses[bottomdate]
    
    towns_houses = pd.merge(houses, towns, how='inner', on=['State', 'RegionName'])
    towns_houses['ctown'] = True
    houses = pd.merge(houses, towns_houses, how='outer', on = ['State', 'RegionName',
                                                              bottomdate, startdate, 
                                                              'recession_diff'])
    houses['ctown'] = houses['ctown'].fillna(False)
    unitowns = houses[houses['ctown'] == True]
    not_unitowns = houses[houses['ctown'] == False]
    
    t, p = ttest_ind(unitowns['recession_diff'].dropna(), not_unitowns['recession_diff'].dropna())
    different = True if p < 0.01 else False
    betters = "university town" if unitowns['recession_diff'].mean() < not_unitowns['recession_diff'].mean() else "non-university town"
    
    return different,p,betters

run_ttest()


